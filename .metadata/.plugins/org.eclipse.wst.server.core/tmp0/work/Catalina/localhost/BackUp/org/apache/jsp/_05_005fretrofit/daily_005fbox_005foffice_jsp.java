/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.43
 * Generated at: 2019-08-08 01:02:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05_005fretrofit;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import study.model1.retrofit.model.SearchDailyboxOfficeList;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import study.model1.retrofit.model.SearchDailyboxOfficeList.BoxOfficeResult.DailyBoxOfficeList;
import java.text.DecimalFormat;
import java.util.List;
import retrofit2.Call;
import study.model1.retrofit.service.KobisService;
import study.model1.helper.WebHelper;

public final class daily_005fbox_005foffice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("study.model1.helper.WebHelper");
    _jspx_imports_classes.add("study.model1.retrofit.model.SearchDailyboxOfficeList");
    _jspx_imports_classes.add("study.model1.retrofit.service.KobisService");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("retrofit2.Call");
    _jspx_imports_classes.add("study.model1.retrofit.model.SearchDailyboxOfficeList.BoxOfficeResult.DailyBoxOfficeList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	WebHelper webHelper = WebHelper.getInstance(request, response);

	String date = webHelper.getString("date");

	SearchDailyboxOfficeList searchDailyboxOfficeList = null;

	if (date == null) {
		/* 
		Calendar c = Calendar.getInstance();
		c.add(Calendar.DAY_OF_MONTH, -1);
		자바 28번에 확인하면 캘린더 나온다.
		*/
		 
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1); 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		date = sdf.format(cal.getTime());
		
		/* 
		Calendar reg_dt = Calendar.getInstance();
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd : hh:mm:ss");
		String reg_date = sf.format(reg_dt.getTime()); 
		*/
	}
	//date값에 -를 빼서 사용하자.
	String targetDt = date.replace("-", "");
	System.out.println(targetDt);
	//targetDt가 실제로 데이터가 들어가는지 확인해보자
	
	KobisService kobisService = KobisService.retrofit.create(KobisService.class);

	Call<SearchDailyboxOfficeList> call = kobisService.getSearchDailyboxOfficeList(targetDt);
	searchDailyboxOfficeList = call.execute().body();

	List<DailyBoxOfficeList> list = null;

	if (searchDailyboxOfficeList != null) {
		list = searchDailyboxOfficeList.boxOfficeResult.dailyBoxOfficeList;
	}

	DecimalFormat formatter = new DecimalFormat("###,###");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>");
      out.print(targetDt);
      out.write("박스오피스</h1>\r\n");
      out.write("\t<form name=\"form1\" method=\"post\" action=\"daily_box_office.jsp\">\r\n");
      out.write("\t\t<!-- 자기자신한테 자신을 반환한다. -->\r\n");
      out.write("\t\t<label for=\"date\">검색일</label> \r\n");
      out.write("\t\t<input type=\"search\" id=\"date\"name=\"date\" value=\"");
      out.print(date);
      out.write("\" />\r\n");
      out.write("\t\t<input type=\"submit\" value=\"검색\" />\r\n");
      out.write("\t\t");
System.out.println(date); 
      out.write("\r\n");
      out.write("\t\t\t");

			if (list != null && list.size() > 0) {
		
      out.write("\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<table border=\"1\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>순위</th>\r\n");
      out.write("\t\t\t\t<th>제목</th>\r\n");
      out.write("\t\t\t\t<th>개봉일</th>\r\n");
      out.write("\t\t\t\t<th>누적매출액</th>\r\n");
      out.write("\t\t\t\t<th>오늘관객수</th>\r\n");
      out.write("\t\t\t\t<th>누적관객수</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t");
 for (SearchDailyboxOfficeList.BoxOfficeResult.DailyBoxOfficeList item : list) { 
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(item.rank);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(item.movieNm);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(item.openDt);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(formatter.format(item.salesAcc));
      out.write("원</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(formatter.format(item.audiCnt));
      out.write("명</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(formatter.format(item.audiAcc));
      out.write("명</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
